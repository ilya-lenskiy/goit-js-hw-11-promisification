{"version":3,"sources":["code.js/task1.js","code.js/task2.js","code.js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","promise","id","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"src.84f163d5.js","sourceRoot":"../src","sourcesContent":["\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в \n// состояние \"resolved\" через ms миллисекунд. Значением исполнившегося \n// промиса должно быть то кол-во \n// миллисекунд которое передали во время вызова функции delay.\n\n\nconst delay = ms => {\n    return new Promise (resolve => {\n        setTimeout(() => {\n          resolve(ms);\n        }, ms);\n      });\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n\n  const toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve, reject) => {\n        resolve(allUsers.map(user =>\n                  user.name === userName ? { ...user, active: !user.active } : user,\n                ));\n    }); \n  }\n\n  const logger = updatedUsers => console.table(updatedUsers);\n  \n  \n  /*\n   * Должно работать так\n   */\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    const promise = new Promise((resolve, reject) => {\n\n        setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n    \n        if (canProcess) {\n          resolve([transaction.id, delay]);\n        } \n         reject(transaction.id);\n        \n      }, delay);\n\n    })\n    return promise;\n  };\n  \n  const logSuccess = ([id, time]) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n\n  /*\n   * Должно работать так\n   */\n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './sass/main.scss';\nimport './code.js/task1';\nimport './code.js/task2';\nimport './code.js/task3';\n"]}